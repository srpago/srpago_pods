// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SrPagoSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation
import CoreTelephony
import EcommerceModule
import Foundation
import ReaderModule
@_exported import SrPagoSDK
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
public typealias CompletionResponse = (Foundation.Data) -> ()
public typealias CompletionError = (Swift.Error) -> ()
@_inheritsConvenienceInitializers @objc public class SrUtilities : ObjectiveC.NSObject {
  @objc public static func getDeviceName() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class SrPagoSDK : ObjectiveC.NSObject {
  @objc public static let shared: SrPagoSDK.SrPagoSDK
  @objc public static var sandbox: Swift.Bool
  @objc public static var showLogs: Swift.Bool
  @objc public static var environment: SrPagoSDK.SDKModulesEnvironment
  @objc public func makePayment(_ from: UIKit.UIViewController, payment: SrPagoSDK.Payment, successful: @escaping (Swift.Bool) -> ())
  @objc public func setup(appKey: Swift.String, appSecret: Swift.String)
  @objc public func makeRefund(transactionId: Swift.String, completion: @escaping (Swift.String) -> (), error: @escaping (Swift.Error) -> ())
  @objc deinit
}
@objc public class Payment : ObjectiveC.NSObject {
  @objc public init(amount: Swift.Float, reference: Swift.String)
  @objc deinit
}
@objc public enum SDKModulesEnvironment : Swift.Int {
  case DEVELOP
  case SANDBOX
  case CERTIFICATION
  case PRODUCTION
  case FIMEENV
  case STAGGING
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias updateLocationCompletion = (Swift.Double, Swift.Double) -> ()
public typealias locationError = (Swift.Error) -> ()
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LocationService : ObjectiveC.NSObject {
  public static let shared: SrPagoSDK.LocationService
  public func getLocation(location: @escaping SrPagoSDK.updateLocationCompletion, error: @escaping SrPagoSDK.locationError)
  @objc deinit
}
public enum HTTPMethods : Swift.String {
  case options
  case get
  case head
  case post
  case put
  case patch
  case delete
  case trace
  case connect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class ConnectionRequest : ObjectiveC.NSObject {
  public var headers: [Swift.String : Swift.String]
  public var timeOut: Swift.Int
  public init(url: Swift.String, type: SrPagoSDK.HTTPMethods, body: Any?, urlParams: [Swift.String : Swift.String]?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Connection : ObjectiveC.NSObject {
  public static func makeConnection<expectedObj>(request: SrPagoSDK.ConnectionRequest, responseJSON: expectedObj.Type, completion: @escaping (expectedObj) -> (), connectionError: @escaping (Swift.Error) -> ()) where expectedObj : Swift.Decodable
  public static func makeConnection(request: SrPagoSDK.ConnectionRequest, jsonResponse: @escaping ([Swift.String : Any]) -> (), connectionError: @escaping (Swift.Error) -> ())
  @objc override dynamic public init()
  @objc deinit
}
public struct Contactless : Swift.Codable {
  public let active: Swift.Bool
  public let device: Swift.String
  public let lastFirmwareVersion: Swift.String?
  public let urlDownloadFirmware: Swift.String?
  public let lastConfigVersion: Swift.String?
  public let urlDownloadConfig: Swift.String?
  public let forceUpdate: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension SrPagoSDK.SDKModulesEnvironment : Swift.Equatable {}
extension SrPagoSDK.SDKModulesEnvironment : Swift.Hashable {}
extension SrPagoSDK.SDKModulesEnvironment : Swift.RawRepresentable {}
extension SrPagoSDK.HTTPMethods : Swift.Equatable {}
extension SrPagoSDK.HTTPMethods : Swift.Hashable {}
extension SrPagoSDK.HTTPMethods : Swift.RawRepresentable {}
