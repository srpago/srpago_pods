// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ReaderModule
import AVFoundation
import AVKit
import CoreBluetooth
import CoreLocation
import CoreTelephony
import Foundation
import Lottie
import PrinterModule
@_exported import ReaderModule
import ReadersPrivate
import Swift
import SystemConfiguration
import UIKit
@_inheritsConvenienceInitializers @objc public class SearchReaderController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SearchReaderController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@_hasMissingDesignatedInitializers @objc public class MonthlyPayment : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public typealias updateLocationCompletion = (Swift.Double, Swift.Double) -> ()
public typealias locationError = (Swift.Error) -> ()
@objc public class ReaderInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let readerType: Swift.Int
  @objc final public let batteryPercentage: Swift.Int
  @objc final public let firmwareVersion: Swift.String
  @objc final public let hardwareVersion: Swift.String
  @objc final public let uid: Swift.String?
  @objc final public let serialNumber: Swift.String?
  @objc final public let emvKeyProfileID: Swift.String?
  @objc final public let defaultLanguage: Swift.String?
  @objc final public let pinKeyProfileID: Swift.String?
  @objc final public let firmwareID: Swift.String?
  @objc final public let bootloaderVersion: Swift.String?
  @objc final public let terminalSettingVersion: Swift.String?
  @objc final public let vendorID: Swift.String?
  @objc final public let bID: Swift.String?
  @objc final public let macKeyProfileID: Swift.String?
  @objc final public let pinKsn: Swift.String?
  @objc final public let macKsn: Swift.String?
  @objc final public let supportedLanguages: Swift.String?
  @objc final public let batteryLevel: Swift.String?
  @objc final public let deviceSettingVersion: Swift.String?
  @objc final public let sdkVersion: Swift.String?
  @objc final public let trackKeyProfileID: Swift.String?
  @objc final public let emvKsn: Swift.String?
  @objc final public let formatID: Swift.String?
  @objc final public let trackKsn: Swift.String?
  @objc final public let productID: Swift.String?
  public var isSupportedTrack1: Swift.Bool?
  public var isSupportedTrack2: Swift.Bool?
  public var isSupportedTrack3: Swift.Bool?
  public var isSupportedNfc: Swift.Bool?
  public var isUsbConnected: Swift.Bool?
  public var isCharging: Swift.Bool?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public typealias CompletionResponse = (Foundation.Data) -> ()
public typealias CompletionError = (Swift.Error) -> ()
@_inheritsConvenienceInitializers @objc(BrandCardManager) public class BrandCardManager : ObjectiveC.NSObject {
  @objc public func isMasterCard(brand: Swift.String) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public func print(_ items: Swift.String..., filename: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line, separator: Swift.String = " ", terminator: Swift.String = "\n")
public func print(_ items: Any..., separator: Swift.String = " ", terminator: Swift.String = "\n")
@objc public class NewRelicLogger : ObjectiveC.NSObject {
  public static var insertKey: Swift.String
  @objc public init(options: ReaderModule.NewRelicLoggerOptions)
  @objc public class func configure(insertKey: Swift.String)
  @objc public func logLoginEvent(userEmail: Swift.String)
  @objc public func logLoginEvent(productToken: Swift.String)
  @objc public func logTransactionEvent(amount: Swift.Float, cardType: ReaderModule.NewRelicLogger.CardType, cardBrand: ReaderModule.NewRelicLogger.CardBrand, commision: Swift.Float, currency: ReaderModule.NewRelicLogger.Currency, latitude: Swift.Float, longitude: Swift.Float, makePaymentFailReason: Swift.String, msi: Swift.Int, readerBatteryPercentage: Swift.Int, readerFirmware: Swift.String, readerHardware: Swift.String, readerIsCharging: Swift.Bool, readerType: ReaderModule.NewRelicLogger.ReaderTypes, readerAppOsName: Swift.String? = nil, readerOsVersion: Swift.String? = nil, reference: Swift.String, status: Swift.String, tip: Swift.Float, total: Swift.Float, transactionTime: Swift.String?, serverResponseTime: Swift.String?, deviceConnectionTime: Swift.String?, user: Swift.String, TLVsTags: [Swift.String : Any]? = nil, bin: Swift.String?, transactionId: Swift.String? = nil, entryMode: Swift.String?)
  @objc public func addUserData(user: Swift.String, commission: Swift.Float)
  @objc public func addLocationData(latitude: Swift.Float, longitude: Swift.Float)
  @objc public func addMSIData(msi: Swift.Int)
  @objc public func addPaymentData(reference: Swift.String, total: Swift.Float, tip: Swift.Float, amount: Swift.Float, currency: Swift.String)
  @objc public func addCardData(cardType: Swift.String)
  @objc public func addCardReaderData(readerType: ReaderModule.NewRelicLogger.ReaderTypes, firmware: Swift.String, batteryPercentage: Swift.Int, serialNumber: Swift.String, isCharging: Swift.Bool, appOSName: Swift.String? = nil, osVersion: Swift.String? = nil)
  @objc public func closeTransaction(status: Swift.String, makePaymentFailReason: Swift.String? = "")
  @objc public func startTransactionTime()
  @objc public func stopTransactionTime()
  @objc override dynamic public init()
  @objc deinit
}
@objc public class NewRelicLoggerOptions : ObjectiveC.NSObject {
  @objc public init(sdkBuild: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension NewRelicLogger {
  @objc public enum ReaderTypes : Swift.Int {
    case UNKNOW
    case BBPOSBluetooth
    case PAX
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum CardType : Swift.Int {
    case chip
    case swipe
    case contactless
    case contactless_msg
    case undetermined
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum Currency : Swift.Int {
    case MXN
    case USD
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum CardBrand : Swift.Int {
    case MasterCard
    case Visa
    case AmericanExpress
    case Carnet
    case Unknown
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc public enum ReaderSate : Swift.Int {
  case connecting = 0
  case connected = 1
  case disconnected = 2
  case waitingCard = 3
  case cardDetected = 4
  case setPin = 5
  case removeCard = 6
  case cardRemoved = 7
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ReaderType : Swift.Int {
  case unknow = 0
  case qposBluetooth = 1
  case qposAudio = 2
  case bbposBluetooth = 3
  case bbposAudio = 4
  case pax = 5
  case fake = 6
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ReadersDeprecated : Swift.Int {
  case qposBluetooth = 1
  case qposAudio = 2
  case bbposAudio = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(ReaderModule) public class ReaderModule : ObjectiveC.NSObject {
  @objc public static var shared: ReaderModule.ReaderModule
  @objc public static func setSandboxEnvironment(sandbox: Swift.Bool)
  @objc public func searchBluetoothReaders(devices: @escaping (([CoreBluetooth.CBPeripheral]) -> ()), error: @escaping ((Swift.Error) -> ()))
  @objc public func connectWith(device: CoreBluetooth.CBPeripheral)
  @objc public func connectWithFake(deviceName: Swift.String)
  @objc public func readerStateDidChange(completion: ((ReaderModule.ReaderSate) -> ())?, error: @escaping (Swift.Error) -> ())
  @objc public func requestReaderInfo(info: @escaping (ReaderModule.ReaderInfo) -> ())
  @objc public func getCachedReaderInfo() -> ReaderModule.ReaderInfo
  @objc public func connectLastPaired()
  @objc public func removeLastPaired()
  @objc public func isReaderPaired() -> Swift.Bool
  @objc public func isDeviceDeprecated() -> Swift.Bool
  @objc public func isConnected() -> Swift.Bool
  @objc public func cancelTransaction()
  @objc public func createPayment(payment: ReaderModule.ReaderPayment, processing: @escaping (Swift.Bool) -> (), msiPromos: @escaping ([ReaderModule.MonthlyPayment]) -> (), result: @escaping (ReaderModule.ServerTransaction) -> (), error: @escaping (Swift.Error) -> (), vc: UIKit.UIViewController? = nil)
  @objc public func showPaymentController(_ from: UIKit.UIViewController, payment: ReaderModule.ReaderPayment, success: @escaping (ReaderModule.ServerTransaction) -> (), error: @escaping (Swift.Error) -> ())
  @objc public func paymentAddMSI(monthlyPayment: ReaderModule.MonthlyPayment?)
  @objc public func sendtTicket(operationID: Swift.String, mail: Swift.String?, phone: Swift.String?, success: @escaping () -> (), error: @escaping (Swift.Error) -> ())
  @objc deinit
}
@objc public class RecipeModel : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class Receipt : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class RecipePhone : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class RecipeAddress : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class ServerTransaction : ObjectiveC.NSObject, Swift.Decodable {
  required public convenience init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc public class ReaderPayment : ObjectiveC.NSObject {
  @objc public init(amount: Swift.Float, reference: Swift.String, tip: Swift.Float)
  @objc override dynamic public init()
  @objc deinit
}
public enum HTTPMethods : Swift.String {
  case options
  case get
  case head
  case post
  case put
  case patch
  case delete
  case trace
  case connect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class ConnectionRequest : ObjectiveC.NSObject {
  public var headers: [Swift.String : Swift.String]
  public var timeOut: Swift.Int
  public init(url: Swift.String, type: ReaderModule.HTTPMethods, body: Any?, urlParams: [Swift.String : Swift.String]?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Connection : ObjectiveC.NSObject {
  public static func makeConnection<expectedObj>(request: ReaderModule.ConnectionRequest, responseJSON: expectedObj.Type, completion: @escaping (expectedObj) -> (), connectionError: @escaping (Swift.Error) -> ()) where expectedObj : Swift.Decodable
  public static func makeConnection(request: ReaderModule.ConnectionRequest, jsonResponse: @escaping ([Swift.String : Any]) -> (), connectionError: @escaping (Swift.Error) -> ())
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SrUtilities : ObjectiveC.NSObject {
  @objc public static func getDeviceName() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LocationService : ObjectiveC.NSObject {
  public static var shared: ReaderModule.LocationService
  public func getLocation(location: @escaping ReaderModule.updateLocationCompletion, error: @escaping ReaderModule.locationError)
  @objc deinit
}
