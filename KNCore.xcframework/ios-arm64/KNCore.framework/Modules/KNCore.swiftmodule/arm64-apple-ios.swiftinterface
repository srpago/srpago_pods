// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KNCore
import CoreBluetooth
import Foundation
@_exported import KNCore
import Swift
import UIKit
import _Concurrency
public enum KNBluetoothPermissionState {
  case authorized
  case denied
  case notDetermined
  public static func == (a: KNCore.KNBluetoothPermissionState, b: KNCore.KNBluetoothPermissionState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct KNRecipeTransaction : Swift.Codable {
  public let AID: Swift.String?
  public let ARQC: Swift.String?
  public let affiliation: Swift.String
  public let authorizationCode: Swift.String?
  public let card: KNCore.RecipeCard?
  public let cryptogramType: Swift.String?
  public let hasDevolution: Swift.Bool
  public let origin: KNCore.Origin
  public let paymentMethod: Swift.String?
  public let timestamp: Swift.String
  public let status: Swift.String
  public let tip: KNCore.Amount
  public let total: KNCore.Amount
  public let commission: KNCore.Amount
  public let transaction: Swift.String
  public let transactionType: Swift.String?
  public let url: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Amount : Swift.Codable {
  public let amount: Swift.String
  public let currency: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Origin : Swift.Codable {
  public let location: KNCore.Location
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Location : Swift.Codable {
  public let latitude: Swift.Double
  public let longitude: Swift.Double
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RecipeCard : Swift.Codable {
  public let credit: Swift.Bool?
  public let holderName: Swift.String
  public let label: Swift.String
  public let signString: Swift.String?
  public let number: Swift.String
  public let type: Swift.String
  public let noSignature: Swift.Bool?
  public let authenticationMethod: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNOperation : Swift.Codable {
  public let user: Swift.String
  public let transaction: Swift.String
  public let total: KNCore.KNMovementTotal
  public let readerUid: Swift.String?
  public let timestamp: Swift.String
  public let paymentMethod: Swift.String
  public let authorizationCode: Swift.String
  public let status: Swift.String
  public let reference: KNCore.KNReference
  public let tip: KNCore.KNMovementTotal
  public let fee: KNCore.KNMovementTotal
  public let commission: KNCore.KNMovementTotal
  public let card: KNCore.KNCard
  public let feeDetails: [KNCore.KNFeeDetails]
  public let origin: KNCore.KNOrigin
  public let affiliation: Swift.String
  public let transactionType: Swift.String
  public let aid: Swift.String?
  public let arqc: Swift.String?
  public let monthlyInstallments: Swift.Int?
  public let hasDevolution: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNReference : Swift.Codable {
  public let number: Swift.String
  public let description: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public class KNMovementTotal : ObjectiveC.NSObject, Swift.Codable {
  final public let amount: Swift.String
  final public let currency: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public struct KNOrigin : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNLocation : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNCard : Swift.Codable {
  public let holderName: Swift.String
  public let type: Swift.String
  public let number: Swift.String
  public let authenticationMethod: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNFeeDetails : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum KNBluetoothState {
  case bluetoothOn
  case bluetoothOff
  case unauthorizedPermissions
  case denied
  case unsupported
  case unknow
  case resetting
  public static func == (a: KNCore.KNBluetoothState, b: KNCore.KNBluetoothState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class KNPeripheral {
  public var name: Swift.String
  public var identifier: Swift.String
  public var peripheral: CoreBluetooth.CBPeripheral?
  public init(with peripheral: CoreBluetooth.CBPeripheral)
  public init(name: Swift.String, identifier: Swift.String)
  @objc deinit
}
public enum KNEnvironmentType : Swift.String {
  case dev
  case sandbox
  case certification
  case fime
  case production
  public static func getEnvironment(_ string: Swift.String?) -> KNCore.KNEnvironmentType
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum KNPaymentState : Swift.String {
  case startPayment
  case typeTip
  case retypeTip
  case insertCard
  case cardDetected
  case typePin
  case retypePin
  case requestOnlineProcess
  case selectMonthWithoutInterest
  case typeSignature
  case retypeSignature
  case paymentSuccess
  case paymentError
  case paymentReversal
  case locationPermissionUnauthorized
  case typePan
  case retypePan
  case sendingPayment
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum KNBrandType : Swift.String, Swift.Decodable {
  case mastercard
  case visa
  case amex
  case crnt
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol KNPaymentDelegate : AnyObject {
  func onPaymentCurrentState(state: KNCore.KNPaymentState)
  func onRequestTips()
  func onPaymentSucess(result: KNCore.KNPaymentResult)
  func onPaymentError(error: KNCore.KNPaymentError)
  func onMonthsAvailable(months: [KNCore.KNPaymentMonth])
  func onReaderInfo(reader: KNCore.KNReaderInfo)
}
public class KNPersistanceModel : KNCore.KNPersistanceRepository {
  public init()
  public func saveUUIDReader(uuid: Swift.String, name: Swift.String)
  public func retriveUUIDReader() -> (Swift.String, Swift.String)?
  public func removeUUIDReader()
  public func save(_ value: Swift.String, key: Swift.String)
  public func getValue(_ key: Swift.String) -> Swift.String?
  @objc deinit
}
public struct KNBluetoothReader : Swift.Identifiable {
  public var id: Swift.ObjectIdentifier
  public var device: KNCore.KNPeripheral
  public var readerType: KNCore.KNConnectionReaderType
  public init(id: Swift.ObjectIdentifier, device: KNCore.KNPeripheral, readerType: KNCore.KNConnectionReaderType)
  public init?(name: Swift.String, uuid: Swift.String)
  public typealias ID = Swift.ObjectIdentifier
}
public struct KNReaderInfo : Swift.Encodable {
  public let readerTypeConnection: KNCore.KNConnectionReaderType
  public let batteryPercentage: Swift.Int
  public let firmwareVersion: Swift.String
  public let hardwareVersion: Swift.String
  public let uid: Swift.String
  public let serialNumber: Swift.String
  public let emvKeyProfileID: Swift.String?
  public let defaultLanguage: Swift.String?
  public let pinKeyProfileID: Swift.String?
  public let firmwareID: Swift.String?
  public let bootloaderVersion: Swift.String?
  public let terminalSettingVersion: Swift.String?
  public let vendorID: Swift.String?
  public let bID: Swift.String?
  public let macKeyProfileID: Swift.String?
  public let pinKsn: Swift.String?
  public let macKsn: Swift.String?
  public let supportedLanguages: Swift.String?
  public let batteryLevel: Swift.String?
  public let deviceSettingVersion: Swift.String?
  public let sdkVersion: Swift.String?
  public let trackKeyProfileID: Swift.String?
  public let emvKsn: Swift.String?
  public let formatID: Swift.String?
  public let trackKsn: Swift.String?
  public let productID: Swift.String?
  public var isSupportedTrack1: Swift.Bool?
  public var isSupportedTrack2: Swift.Bool?
  public var isSupportedTrack3: Swift.Bool?
  public var isSupportedNfc: Swift.Bool?
  public var isUsbConnected: Swift.Bool?
  public var isCharging: Swift.Bool?
  public var readerType: Swift.String
  public var termAppName: Swift.String
  public var termAppVer: Swift.String
  public var termOsVer: Swift.String
  public init(readerTypeConnection: KNCore.KNConnectionReaderType, batteryPercentage: Swift.Int, firmwareVersion: Swift.String, hardwareVersion: Swift.String, uid: Swift.String, serialNumber: Swift.String, emvKeyProfileID: Swift.String? = nil, defaultLanguage: Swift.String? = nil, pinKeyProfileID: Swift.String? = nil, firmwareID: Swift.String? = nil, bootloaderVersion: Swift.String? = nil, terminalSettingVersion: Swift.String? = nil, vendorID: Swift.String? = nil, bID: Swift.String? = nil, macKeyProfileID: Swift.String? = nil, pinKsn: Swift.String? = nil, macKsn: Swift.String? = nil, supportedLanguages: Swift.String? = nil, batteryLevel: Swift.String? = nil, deviceSettingVersion: Swift.String? = nil, sdkVersion: Swift.String? = nil, trackKeyProfileID: Swift.String? = nil, emvKsn: Swift.String? = nil, formatID: Swift.String? = nil, trackKsn: Swift.String? = nil, productID: Swift.String? = nil, isSupportedTrack1: Swift.Bool? = nil, isSupportedTrack2: Swift.Bool? = nil, isSupportedTrack3: Swift.Bool? = nil, isSupportedNfc: Swift.Bool? = nil, isUsbConnected: Swift.Bool? = nil, isCharging: Swift.Bool? = nil, readerType: Swift.String, termAppName: Swift.String, termAppVer: Swift.String, termOsVer: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
extension Foundation.Data {
  public var prettyPrintedJSONString: Foundation.NSString? {
    get
  }
}
@_hasMissingDesignatedInitializers public class KNUrlManager {
  public static let shared: KNCore.KNUrlManager
  public func getUrl() -> Swift.String
  public func getEnvironment() -> KNCore.KNEnvironmentType
  public func setEnvironment(_ environment: KNCore.KNEnvironmentType)
  public func getAppToken() -> Swift.String
  public func setBasicLogin(token: Swift.String)
  public func getBasicAuthentication() -> [Swift.String : Swift.String]
  public func setBearer(token: Swift.String)
  public func getBearerAuthentication() -> [Swift.String : Swift.String]
  @objc deinit
}
public enum SendPrinterType {
  case sms
  case email
  public static func == (a: KNCore.SendPrinterType, b: KNCore.SendPrinterType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct KNPaymentMonth {
  public let months: Swift.Int
  public let rate: Swift.Float
  public let amount: Swift.String
  public let promotionId: Swift.Int
  public init(months: Swift.Int, rate: Swift.Float, amount: Swift.String, promotionId: Swift.Int)
  public init()
}
public enum KNReaderState : Swift.Int {
  case onUnkwnowReader
  case onPowerButtonPressed
  case onBtDisconnected
  case onBTConnected
  case onBTPairing
  case onErrorPairing
  public var string: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct KNPaymentResult {
  public var token: Swift.String
  public var method: Swift.String
  public var authorizationCode: Swift.String
  public var transactionId: Swift.String
  public var monthlyInstallments: Swift.Int
  public var timestamp: Foundation.Date
  public var paymentMethod: Swift.String
  public var status: Swift.Bool
  public var reference: Swift.String
  public var cardHolderName: Swift.String
  public var cardType: Swift.String
  public var cardNumber: Swift.String
  public var cardLabel: Swift.String
  public var amount: Swift.Double
  public var currency: Swift.String
  public var latitude: Swift.Double
  public var longitude: Swift.Double
  public var affilation: Swift.String
  public var arqc: Swift.String
  public var aid: Swift.String
  public var transactionType: Swift.String
  public var url: Swift.String
  public var tip: Swift.Double
  public var commission: Swift.Double
  public var authenticationMethod: Swift.String
  public var signature: Swift.String
  public init(paymentResult: KNCore.KNMakePaymentResult, reference: Swift.String = "", months: Swift.Int = 0, signature: Swift.String = "")
}
public class KNDateHelper {
  public init(date: Foundation.Date)
  public init(timeInterval: Foundation.TimeInterval)
  public init?(date: Swift.String, format: KNCore.KNDateFormat)
  public func getTime(format: Swift.String = "HH:mm:ss") -> Swift.String
  public func getDate(format: Swift.String = "yyyy-MM-dd") -> Swift.String
  public static func getString(_ dateSelected: Foundation.Date, format: KNCore.KNDateFormat) -> Swift.String
  public static func getDate(_ dateSelected: Swift.String, format: KNCore.KNDateFormat) -> Foundation.Date?
  @objc deinit
}
public struct KNSignatureViewData {
  public let orientation: UIKit.UIDeviceOrientation
  public let waterMark: UIKit.UIImage?
  public let mainColor: UIKit.UIColor
  public let buttonColor: UIKit.UIColor
  public let bottomColor: UIKit.UIColor
  public let font: UIKit.UIFont?
  public init()
  public init(orientation: UIKit.UIDeviceOrientation, waterMark: UIKit.UIImage?, mainColor: UIKit.UIColor, buttonColor: UIKit.UIColor, bottomColor: UIKit.UIColor, font: UIKit.UIFont)
}
public struct KNMakePaymentResult : Swift.Codable {
  public let status: Swift.Bool
  public let token: Swift.String
  public let method: Swift.String
  public let autorizationCode: Swift.String
  public let cryptogramType: Swift.String?
  public let cryptogramValue: Swift.String?
  public let operationId: Swift.String
  public let card: Swift.String
  public let cardType: Swift.String?
  public let recipe: KNCore.KNRecipeTransaction
  public let emvResponse: Swift.String?
  public let issuerAuthenticationData: Swift.String?
  public let issuerScriptData: Swift.String?
  public let tag8a: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct KNPaymentError : Swift.Error {
  public let code: KNCore.KNPaymentErrorType
  public let errorLocalizedDescription: Swift.String?
  public init(type: KNCore.KNPaymentErrorType, description: Swift.String? = nil)
}
public struct KNPrinter : Swift.Identifiable {
  public let id: Foundation.UUID
  public var name: Swift.String
  public var bluetoothUUID: Swift.String
  public var characteristicUUID: Swift.String
  public var serviceUUID: Swift.String
  public var isConnected: Swift.Bool
  public var device: KNCore.KNPeripheral?
  public init(name: Swift.String, bluetoothUUID: Swift.String, characteristicUUID: Swift.String, serviceUUID: Swift.String, isConnected: Swift.Bool, device: KNCore.KNPeripheral?)
  public init(name: Swift.String, bluetoothUUID: Swift.String, isConnected: Swift.Bool)
  public static func defaultPrinter() -> KNCore.KNPrinter
  public typealias ID = Foundation.UUID
}
public struct KNConfigurator {
  public var appKey: Swift.String
  public var appSecret: Swift.String
  public var environment: KNCore.KNEnvironmentType
  public init(environment: KNCore.KNEnvironmentType, appkey: Swift.String, appSecret: Swift.String)
  public static func setEnvironment(_ environment: KNCore.KNEnvironmentType)
  public static func getEnvironment() -> KNCore.KNEnvironmentType
}
public enum KNDateFormat : Swift.String {
  case HHmmss
  case yyyyMMdd
  case yyyyMMddTHHmmssz
  case MMddyyyyHHmm
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct KNRecipe : Swift.Decodable, Swift.Equatable {
  public var logo: Foundation.Data?
  public var businessName: Swift.String
  public var address: Swift.String
  public var phone: Swift.String
  public var date: Swift.String
  public var aid: Swift.String
  public var arqc: Swift.String
  public var authMethod: KNCore.KNAuthMethod
  public var msiMonths: Swift.String
  public var cardNumber: Swift.String
  public var reference: Swift.String
  public var cardHolder: Swift.String
  public var cardType: KNCore.KNBrandType
  public var afiliation: Swift.String
  public var tipAmount: Swift.String
  public var amount: Swift.String
  public var totalAmount: Swift.String
  public var signature: Swift.String?
  public var authNumber: Swift.String
  public var isOriginalTicket: Swift.Bool
  public init(logo: Foundation.Data? = nil, businessName: Swift.String, address: Swift.String, phone: Swift.String, date: Swift.String, aid: Swift.String, arqc: Swift.String, authMethod: KNCore.KNAuthMethod, msiMonths: Swift.String, cardNumber: Swift.String, reference: Swift.String, cardHolder: Swift.String, cardType: KNCore.KNBrandType, afiliation: Swift.String, tipAmount: Swift.String, amount: Swift.String, totalAmount: Swift.String, signature: Swift.String? = nil, authNumber: Swift.String, isOriginalTicket: Swift.Bool)
  public static func == (a: KNCore.KNRecipe, b: KNCore.KNRecipe) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
public protocol KNPersistanceRepository : AnyObject {
  func saveUUIDReader(uuid: Swift.String, name: Swift.String)
  func retriveUUIDReader() -> (Swift.String, Swift.String)?
  func removeUUIDReader()
  func save(_ value: Swift.String, key: Swift.String)
  func getValue(_ key: Swift.String) -> Swift.String?
}
public enum LocalPersistanceCatalog : Swift.String {
  case readerIdentifier
  case readerName
  case currentEnvironment
  case currentUser
  case currentUserPassword
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol KNPrinterDelegate : AnyObject {
  func printer(printers: [KNCore.KNPrinter])
  func printer(_ printer: KNCore.KNPrinter, connected: Swift.Bool)
  func printer(state: KNCore.KNBluetoothState)
  func printer(printerProgress: KNCore.KNPrinterProgress)
}
public enum KNConnectionReaderType : Swift.Encodable, Swift.CaseIterable {
  case paxD180
  case pinPadMini
  public var bluetoothDescription: Swift.String {
    get
  }
  public var contactlessDescription: Swift.String {
    get
  }
  public var reportingDescription: Swift.String {
    get
  }
  public var intValue: Swift.Int {
    get
  }
  public static func readerTypeOf(name: Swift.String) -> KNCore.KNConnectionReaderType?
  public static func == (a: KNCore.KNConnectionReaderType, b: KNCore.KNConnectionReaderType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [KNCore.KNConnectionReaderType]
  public static var allCases: [KNCore.KNConnectionReaderType] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
public enum KNPaymentErrorType : Swift.Int {
  case sdkNotInitialized
  case readerNotConnected
  case readerError
  case invalidAmount
  case transactionCanceled
  case serviceError
  case tipsError
  case unauthorizedPermissions
  case errorBluetooth
  case errorReversal
  case invalidPaymentError
  case unknown
  public var string: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum KNAuthMethod : Swift.String, Swift.Decodable, Swift.Equatable {
  case contactless
  case nip
  case signature
  case pinSignature
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum KNPrinterProgress {
  case started
  case inProgress
  case finished
  case interrumped
  public static func == (a: KNCore.KNPrinterProgress, b: KNCore.KNPrinterProgress) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct KNFeeDetail {
  public let amount: Swift.Double
  public let currency: Swift.String
}
extension KNCore.KNBluetoothPermissionState : Swift.Equatable {}
extension KNCore.KNBluetoothPermissionState : Swift.Hashable {}
extension KNCore.KNBluetoothState : Swift.Equatable {}
extension KNCore.KNBluetoothState : Swift.Hashable {}
extension KNCore.KNEnvironmentType : Swift.Equatable {}
extension KNCore.KNEnvironmentType : Swift.Hashable {}
extension KNCore.KNEnvironmentType : Swift.RawRepresentable {}
extension KNCore.KNPaymentState : Swift.Equatable {}
extension KNCore.KNPaymentState : Swift.Hashable {}
extension KNCore.KNPaymentState : Swift.RawRepresentable {}
extension KNCore.KNBrandType : Swift.Equatable {}
extension KNCore.KNBrandType : Swift.Hashable {}
extension KNCore.KNBrandType : Swift.RawRepresentable {}
extension KNCore.SendPrinterType : Swift.Equatable {}
extension KNCore.SendPrinterType : Swift.Hashable {}
extension KNCore.KNReaderState : Swift.Equatable {}
extension KNCore.KNReaderState : Swift.Hashable {}
extension KNCore.KNReaderState : Swift.RawRepresentable {}
extension KNCore.KNDateFormat : Swift.Equatable {}
extension KNCore.KNDateFormat : Swift.Hashable {}
extension KNCore.KNDateFormat : Swift.RawRepresentable {}
extension KNCore.LocalPersistanceCatalog : Swift.Equatable {}
extension KNCore.LocalPersistanceCatalog : Swift.Hashable {}
extension KNCore.LocalPersistanceCatalog : Swift.RawRepresentable {}
extension KNCore.KNConnectionReaderType : Swift.Equatable {}
extension KNCore.KNConnectionReaderType : Swift.Hashable {}
extension KNCore.KNPaymentErrorType : Swift.Equatable {}
extension KNCore.KNPaymentErrorType : Swift.Hashable {}
extension KNCore.KNPaymentErrorType : Swift.RawRepresentable {}
extension KNCore.KNAuthMethod : Swift.Hashable {}
extension KNCore.KNAuthMethod : Swift.RawRepresentable {}
extension KNCore.KNPrinterProgress : Swift.Equatable {}
extension KNCore.KNPrinterProgress : Swift.Hashable {}
