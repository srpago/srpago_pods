// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KNPaymentModule
import CoreGraphics
import CoreLocation
import CoreTelephony
import Foundation
import KNAnalyticsPaymentModule
import KNBusinessModule
import KNCore
@_exported import KNPaymentModule
import KNPaymentModule.ReadersPrivate
import KNPaymentModule.ReadersSimulatorPrivate
import Swift
import UIKit
import _Concurrency
extension KNPaymentModule.KNPaymentManager : KNPaymentModule.KNBaseReaderDelegate {
  final public func readerInfoUpdated(_ reader: KNCore.KNReaderInfo)
  final public func onPaymentCurrentState(state: KNCore.KNPaymentState)
  final public func onPaymentError(error: KNCore.KNPaymentError)
  final public func requestPan(_ pan: Swift.String, tlv: [Swift.AnyHashable : Any])
  final public func readerConnected(name: Swift.String, address: Swift.String)
  final public func sendReaderCardInfo(cardInfo: KNPaymentModule.KNReaderCardInfo)
  final public func secondError()
  final public func secondSucess()
  final public func clearTransaction()
}
@objc @_inheritsConvenienceInitializers final public class KNBbposReader : KNPaymentModule.KNBaseReader {
  @objc override dynamic public init()
  @objc deinit
}
extension KNPaymentModule.KNBbposReader : KNPaymentModule.BBDeviceControllerDelegate {
  @objc final public func onBTReturnScanResults(_ devices: [Any])
  @objc final public func onBTScanStopped()
  @objc final public func onBTScanTimeout()
  @objc final public func onBTConnected(_ connectedDevice: ObjectiveC.NSObject)
  @objc final public func onBTDisconnected()
  @objc final public func onPowerButtonPressed()
  @objc final public func onPowerDown()
  @objc final public func onBTConnectTimeout()
  @objc final public func onReturnDeviceInfo(_ deviceInfo: [Swift.AnyHashable : Any])
  @objc final public func onError(errorType: KNPaymentModule.BBDeviceErrorType, errorMessage: Swift.String)
  @objc final public func onRequestSetAmount()
  @objc final public func onRequestTerminalTime()
  @objc final public func onRequestSelectApplication(_ applicationArray: [Any])
  @objc final public func onRequestFinalConfirm()
  @objc final public func onWaitingForCard(checkCardMode: KNPaymentModule.BBDeviceCheckCardMode)
  @objc final public func onReturnCancelCheckCardResult(_ isSuccess: Swift.Bool)
  @objc final public func onReturnCheckCardResult(result: KNPaymentModule.BBDeviceCheckCardResult, cardData: [Swift.AnyHashable : Any])
  @objc final public func onReturnTransactionResult(result: KNPaymentModule.BBDeviceTransactionResult)
  @objc final public func onRequestOnlineProcess(_ tlv: Swift.String)
  @objc final public func onRequestPinEntry(pinEntrySource: KNPaymentModule.BBDevicePinEntrySource)
  @objc final public func onReturnBatchData(_ tlv: Swift.String)
  @objc final public func onReturnReversalData(_ tlv: Swift.String)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) final public class YPDrawSignatureView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: KNPaymentModule.YPSignatureDelegate?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var strokeWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var strokeColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "backgroundColor")
  @IBInspectable @_Concurrency.MainActor(unsafe) final public var signatureBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var doesContainSignature: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public func draw(_ rect: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override final public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override final public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) final public func clear()
  @_Concurrency.MainActor(unsafe) final public func getSignature(scale: CoreGraphics.CGFloat = 1) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) final public func getCroppedSignature(scale: CoreGraphics.CGFloat = 1) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) final public func getPDFSignature() -> Foundation.Data?
  @objc deinit
}
public protocol YPSignatureDelegate : AnyObject {
  func didStart(_ view: KNPaymentModule.YPDrawSignatureView)
}
extension KNPaymentModule.KNPaymentManager {
  final public func loginUser(user: Swift.String, password: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  final public func getTicketFrom(transaction: KNCore.KNPaymentResult, completion: @escaping (Swift.Result<KNCore.KNRecipe, KNCore.KNPaymentError>) -> Swift.Void)
  final public func getTicketFrom(operation: KNCore.KNOperation, completion: @escaping (Swift.Result<KNCore.KNRecipe, KNCore.KNPaymentError>) -> Swift.Void)
  final public func getOperations(offset: Swift.Int, limit: Swift.Int, completion: @escaping ([KNCore.KNOperation]?) -> Swift.Void)
  final public func sendOperation(id: Swift.String, for type: KNCore.SendPrinterType, destination: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  final public func makeRefund(transactionId: Swift.String, completion: @escaping (Swift.String?) -> Swift.Void)
}
extension Swift.String {
  public subscript(value: Swift.Int) -> Swift.Character {
    get
  }
  public func toHexEncodedString(uppercase: Swift.Bool = true, prefix: Swift.String = "", separator: Swift.String = "") -> Swift.String
}
extension Swift.String {
  public subscript(value: Foundation.NSRange) -> Swift.Substring {
    get
  }
}
extension Swift.String {
  public subscript(value: Swift.CountableClosedRange<Swift.Int>) -> Swift.Substring {
    get
  }
  public subscript(value: Swift.CountableRange<Swift.Int>) -> Swift.Substring {
    get
  }
  public subscript(value: Swift.PartialRangeUpTo<Swift.Int>) -> Swift.Substring {
    get
  }
  public subscript(value: Swift.PartialRangeThrough<Swift.Int>) -> Swift.Substring {
    get
  }
  public subscript(value: Swift.PartialRangeFrom<Swift.Int>) -> Swift.Substring {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class KNBaseReader : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public protocol KNReaderStateDelegate : AnyObject {
  func onReaderState(state: KNCore.KNReaderState)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func showNativeView()
}
public struct KNPaxDeviceInfo {
  public let fullTlv: Swift.String?
  public let deviceInfo: KNCore.KNReaderInfo?
  public let serialNumber: Swift.String?
}
final public class KNPaymentManager {
  final public var reader: KNPaymentModule.KNBaseReader?
  weak final public var delegate: KNCore.KNPaymentDelegate?
  weak final public var readerDelegate: KNPaymentModule.KNReaderStateDelegate?
  weak final public var localStorage: KNCore.KNPersistanceRepository?
  public init()
  final public func loginAppConfig(_ config: KNCore.KNConfigurator)
  final public func initPayment(amount: Swift.String, reference: Swift.String?)
  final public func setTip(_ tip: Swift.String)
  final public func setMonth(month: KNCore.KNPaymentMonth)
  @objc deinit
}
public struct KNMsr : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public struct KNPaxSwipeData {
  public let fullTLV: Swift.String
  public let track1: Swift.String?
  public let track2: Swift.String?
}
public struct KNReaderCardInfo : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol KNBaseReaderDelegate : AnyObject {
  func readerInfoUpdated(_ reader: KNCore.KNReaderInfo)
  func onPaymentCurrentState(state: KNCore.KNPaymentState)
  func onPaymentError(error: KNCore.KNPaymentError)
  func readerConnected(name: Swift.String, address: Swift.String)
  func sendReaderCardInfo(cardInfo: KNPaymentModule.KNReaderCardInfo)
  func requestPan(_ pan: Swift.String, tlv: [Swift.AnyHashable : Any])
  func secondError()
  func secondSucess()
  func clearTransaction()
}
public struct KNPaxCard {
  public let holderName: Swift.String
  public let cardNumber: Swift.String
  public let expirationMonth: Swift.String
  public let expirationYear: Swift.String
  public let msr1: Swift.String
  public let msr2: Swift.String
}
public struct KNSecondData {
  public let scriptData: Swift.String?
  public let success: Swift.Bool
  public let authCode: Swift.String?
  public let emv: Swift.String?
  public let respCode: Swift.String
  public let error: KNCore.KNPaymentError?
}
extension Swift.StringProtocol {
  public var hexaToDecimal: Swift.Int {
    get
  }
}
public struct KNCardInfo : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension KNPaymentModule.KNPaymentManager {
  final public func connectReader(bluetooth: KNCore.KNBluetoothReader)
  final public func disconnectReader()
  final public func getReaderInfo(readerInfo: @escaping (KNCore.KNReaderInfo?) -> Swift.Void, error: @escaping (KNCore.KNPaymentError?) -> Swift.Void)
  final public func validateConnection() -> Swift.Bool
  final public func isRecognizedDevice() -> Swift.Bool
  final public func getUUIDDevice() -> Swift.String?
  final public func reconnectReader()
}
