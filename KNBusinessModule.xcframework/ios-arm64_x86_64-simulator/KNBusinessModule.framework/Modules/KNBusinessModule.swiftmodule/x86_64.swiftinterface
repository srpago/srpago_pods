// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KNBusinessModule
import CoreTelephony
import Foundation
@_exported import KNBusinessModule
import KNCore
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
public typealias KNMakePayment = (response: KNCore.KNMakePaymentResult?, error: KNBusinessModule.TransactionError?)
public struct TransactionError : Swift.Codable {
  public let code: Swift.String?
  public let description: Swift.String
  public let message: Swift.String
  public let detail: KNBusinessModule.KNErrorDetail?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNErrorDetail : Swift.Codable {
  public let code: Swift.String
  public let httpStatusCode: Swift.Int
  public let message: Swift.String
  public let issuerAuthenticationData: Swift.String?
  public let tag8a: Swift.String?
  public let issuerScriptData: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class KNAppLoginUseCase {
  public init()
  public func invoke(appKey: Swift.String, result: @escaping (KNBusinessModule.KNAuth?) -> Swift.Void)
  @objc deinit
}
public class KNMakeReversalUseCase {
  public init()
  public func invoke(transactionID: Swift.String, result: @escaping (KNBusinessModule.KNReversal?) -> Swift.Void)
  @objc deinit
}
public typealias KNPaymentSettings = (response: KNBusinessModule.KNPaymentSettingsResult?, error: Swift.Error?)
public struct KNPaymentSettingsResult : Swift.Codable {
  public let monthlyInstallments: KNBusinessModule.KNMonthlyInstallments
  public let paymentMethods: KNBusinessModule.KNPaymmentMethods
  public let tip: KNBusinessModule.KNTipSettings
  public let reference: KNBusinessModule.KNReferenceSettings
  public let ife: KNBusinessModule.KNIFESettings?
  public var isCertification: Swift.Bool?
  public var contactless: [KNBusinessModule.KNContactless]?
  public var trackingReader: KNBusinessModule.KNTrackingReader?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNMonthlyInstallments : Swift.Codable {
  public let enabled: Swift.Bool
  public let minAmount: Swift.String
  public let available: [Swift.String]
  public let selected: [Swift.String]
  public let selectedAmount: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNPaymmentMethods : Swift.Codable {
  public let swipe: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNTipSettings : Swift.Codable {
  public let enabled: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNReferenceSettings : Swift.Codable {
  public let available: [Swift.String]
  public let selected: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNIFESettings : Swift.Codable {
  public let enable: Swift.Bool
  public let minSelectedAmount: Swift.Float
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNContactless : Swift.Codable {
  public let active: Swift.Bool
  public let device: Swift.String
  public init(active: Swift.Bool, device: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNTrackingReader : Swift.Codable {
  public let log: Swift.Bool
  public let isRefund: Swift.Bool
  public init(log: Swift.Bool, isRefund: Swift.Bool)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ConnectionType {
  public static func getConnectionType() -> Swift.String
  @objc deinit
}
public class KNPartialPromortionUseCase {
  public init()
  public func invoke(binCardNumber: Swift.String, amount: Swift.Float, result: @escaping (KNBusinessModule.KNPartialPromotion?) -> Swift.Void)
  @objc deinit
}
public class KNSendOperationSMSUseCase {
  public init()
  public func invoke(sms: Swift.String, operationId: Swift.String, result: @escaping (KNBusinessModule.KNSendRecipe?) -> Swift.Void)
  @objc deinit
}
public typealias KNServerTime = (response: KNBusinessModule.KNServerTimeResult?, error: Swift.Error?)
public struct KNServerTimeResult : Swift.Codable {
  public let currentDate: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class KNPrinterUseCase {
  public func invoke(token: Swift.String)
  @objc deinit
}
public class KNServerTimeUseCase {
  public init()
  public func invoke(readerType: Swift.Int, result: @escaping (KNBusinessModule.KNServerTime?) -> Swift.Void)
  @objc deinit
}
public class KNMakePaymentUseCase {
  public init()
  public func invoke(payment: [Swift.String : Any], result: @escaping (KNBusinessModule.KNMakePayment?) -> Swift.Void)
  @objc deinit
}
public class KNPaymentSettingsUseCase {
  public init()
  public func invoke(result: @escaping (KNBusinessModule.KNPaymentSettings?) -> Swift.Void)
  @objc deinit
}
public class KNSendOperationEmailUseCase {
  public init()
  public func invoke(email: Swift.String, operationId: Swift.String, result: @escaping (KNBusinessModule.KNSendRecipe?) -> Swift.Void)
  @objc deinit
}
public typealias KNOperations = (response: [KNCore.KNOperation]?, error: Swift.Error?)
public struct KNOperationsResult : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNMovementCard : Swift.Codable {
  public let number: Swift.String?
  public let expirationMonth: Swift.String?
  public let expirationYear: Swift.String?
  public let track2: Swift.String?
  public let type: Swift.String?
  public let name: Swift.String?
  public let msr1: Swift.String?
  public let msr2: Swift.String?
  public let msr3: Swift.String?
  public let emvFlag: Swift.String?
  public let msrFlag: Swift.String?
  public let emvData: Swift.String?
  public let cvv: Swift.String?
  public let zipcode: Swift.String?
  public let months: Swift.String?
  public let interests: Swift.String?
  public let tCharacter: Swift.String?
  public let startCardNumber: Swift.String?
  public let endCardNumber: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias KNAuth = (response: KNBusinessModule.KNTokenInfo?, error: Swift.Error?)
public struct KNAuthDomain : Swift.Codable {
  public let success: Swift.Bool
  public let connection: KNBusinessModule.KNTokenInfo?
  public let error: KNBusinessModule.KNAuthError?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNTokenInfo : Swift.Codable {
  public let expires: Swift.String
  public let token: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNAuthError : Swift.Codable {
  public let code: Swift.String
  public let message: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias KNAuthInfo = (response: KNBusinessModule.KNUserInfo?, connection: KNBusinessModule.KNTokenInfo?, error: Swift.Error?)
public struct KNUserInfo : Swift.Codable {
  public let fullProfile: Swift.Bool
  public let verifiedEmail: Swift.Bool
  public let verifiedPhone: Swift.Bool
  public let fullname: Swift.String
  public let email: Swift.String
  public let phone: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNResponseError : Swift.Codable {
  public let code: Swift.Int
  public let message: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias KNReversal = (response: Swift.String?, error: KNBusinessModule.KNBackendError?)
public struct KNReversalDomain : Swift.Codable {
  public let success: Swift.Bool
  public let result: KNBusinessModule.KNReversalResult?
  public let message: Swift.String?
  public let error: KNBusinessModule.KNBackendError?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNReversalResult : Swift.Codable {
  public let token: Swift.String
  public let status: Swift.Bool
  public let method: Swift.String
  public let card: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNBackendError : Swift.Codable {
  public let code: Swift.String?
  public let message: Swift.String?
  public let description: Swift.String?
  public let httpCode: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class KNUserLoginUseCase {
  public init()
  public func invoke(user: Swift.String, password: Swift.String, result: @escaping (KNBusinessModule.KNAuthInfo?) -> Swift.Void)
  @objc deinit
}
public typealias KNPartialPromotion = (response: KNBusinessModule.KNPromotionResult?, error: Swift.Error?)
public struct KNPromotionResult : Swift.Codable {
  public let binInfo: KNBusinessModule.KNBinInfo?
  public let cash: KNBusinessModule.KNCash
  public let promotions: [KNBusinessModule.KNPromotion]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNPromotion : Swift.Codable {
  public let months: Swift.Int
  public let amount: Swift.String
  public let promotionId: Swift.Int
  public let rate: Swift.Float
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNBinInfo : Swift.Codable {
  public let bankName: Swift.String
  public let cardBrand: Swift.String
  public let cardType: Swift.String
  public let countryCode: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNCash : Swift.Codable {
  public let detail: Swift.String
  public let variable: Swift.Float
  public let type: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class KNRecipeUseCase {
  public init()
  public func invoke(operationId: Swift.String, result: @escaping (KNBusinessModule.KNRecipeResponse?) -> Swift.Void)
  @objc deinit
}
public enum KNNetworkMethods : Swift.String {
  case get
  case post
  case put
  case patch
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct KNNetworkRequest {
}
extension Swift.String : Swift.Error {
  public var errorDescription: Swift.String {
    get
  }
}
public class KNOperationsUseCase {
  public init()
  public func invoke(offset: Swift.Int, limit: Swift.Int, result: @escaping (KNBusinessModule.KNOperations?) -> Swift.Void)
  @objc deinit
}
public struct KNRecipeResponse : Swift.Codable {
  public let success: Swift.Bool
  public let result: KNBusinessModule.KNRecipeResult?
  public let message: Swift.String?
  public let error: KNBusinessModule.KNAuthError?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNRecipeResult : Swift.Codable {
  public let user: Swift.String
  public let transaction: Swift.String
  public let timestamp: Swift.String
  public let receipt: KNBusinessModule.Receipt
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public class Receipt : ObjectiveC.NSObject, Swift.Codable {
  final public let businessName: Swift.String
  final public let webpage: Swift.String?
  final public let facebook: Swift.String?
  final public let twitter: Swift.String?
  final public let extra: Swift.String?
  final public let phone: KNBusinessModule.ReceiptPhone?
  final public let address: KNBusinessModule.ReceiptAddress?
  public var isOriginalTicket: Swift.Bool?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class ReceiptPhone : ObjectiveC.NSObject, Swift.Codable {
  final public let label: Swift.String?
  final public let number: Swift.String?
  final public let ext: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class ReceiptAddress : ObjectiveC.NSObject, Swift.Codable {
  final public let street: Swift.String?
  final public let numberExt: Swift.String?
  final public let numberInt: Swift.String?
  final public let town: Swift.String?
  final public let zipCode: Swift.String?
  final public let city: Swift.String?
  final public let country: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias KNSendRecipe = (response: Swift.Bool?, error: Swift.Error?)
public struct KNSendRecipeDomain : Swift.Codable {
  public let success: Swift.Bool
  public let message: Swift.String?
  public let error: KNBusinessModule.KNAuthError?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias KNSign = (response: Swift.Bool, error: Swift.Error?)
public struct KNSignDomain : Swift.Codable {
  public let success: Swift.Bool
  public let result: KNBusinessModule.KNSignResult?
  public let message: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct KNSignResult : Swift.Codable {
  public let success: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class KNUploadSignUseCase {
  public init()
  public func invoke(body: [Swift.String : Any], result: @escaping (KNBusinessModule.KNSign?) -> Swift.Void)
  @objc deinit
}
public class KNThreadDispatcher {
  final public let queue: Dispatch.DispatchQueue
  public init(queue: Dispatch.DispatchQueue)
  @objc deinit
}
@_inheritsConvenienceInitializers public class KNQueueAsync : KNBusinessModule.KNThreadDispatcher {
  public func dispatch(_ work: @escaping () -> Swift.Void)
  public func dispatch(_ workItem: Dispatch.DispatchWorkItem)
  public func dispatch(label: Swift.String) -> KNBusinessModule.KNThreadDispatcher
  override public init(queue: Dispatch.DispatchQueue)
  @objc deinit
}
@_inheritsConvenienceInitializers public class KNQueueSync : KNBusinessModule.KNThreadDispatcher {
  public func dispatch(_ work: @escaping () -> Swift.Void)
  public func dispatch(_ workItem: Dispatch.DispatchWorkItem)
  public func dispatch(label: Swift.String) -> KNBusinessModule.KNThreadDispatcher
  override public init(queue: Dispatch.DispatchQueue)
  @objc deinit
}
extension KNBusinessModule.KNNetworkMethods : Swift.Equatable {}
extension KNBusinessModule.KNNetworkMethods : Swift.Hashable {}
extension KNBusinessModule.KNNetworkMethods : Swift.RawRepresentable {}
